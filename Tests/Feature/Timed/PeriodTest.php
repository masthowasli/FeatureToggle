<?php
/**
 * File of the timed period tests
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * PHP version 5.3
 *
 * @category   Masthowasli
 * @package    FeatureToggle
 * @subpackage Tests
 * @author     Thomas Sliwa <ts@unfinished.dyndns.org>
 * @copyright  2012-2013 - Thomas Sliwa
 * @license    http://opensource.org/licenses/MIT MIT
 * @link       https://github.com/masthowasli/FeatureToggle
 */

namespace Masthowasli\Component\FeatureToggle\Tests\Feature\Timed;

use Masthowasli\Component\FeatureToggle\Feature\Timed\Period;

/**
 * Test class for Feature.
 * Generated by PHPUnit on 2013-04-04 at 16:27:27.
 */
class PeriodTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Tests initial state of a new feature
     *
     * @covers \Masthowasli\Component\FeatureToggle\Feature\Timed\Period::__construct()
     */
    public function testConstructor()
    {
        $older = new \DateTime('1990-01-01');
        $newer = new \DateTime();

        $period = new Period($older, $newer);

        $this->setExpectedException(
            'Masthowasli\Component\FeatureToggle\Exception\Period'
        );

        $invalidPeriod = new Period($newer, $older);
    }

    public function testIsWithin()
    {
        $period = $this->getPeriod();

        $within = new \DateTime('1991-01-01');
        $this->assertTrue($period->isWithin($within));

        $notWithin = new \DateTime('1989-01-01');
        $this->assertFalse($period->isWithin($notWithin));
    }

    protected function getPeriod()
    {
        $older = new \DateTime('1990-01-01');
        $newer = new \DateTime();

        return new Period($older, $newer);
    }
}